<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>H.Gens</title><link href="https://h-gens.github.io/" rel="alternate"></link><link href="https://h-gens.github.io/feeds/misc.atom.xml" rel="self"></link><id>https://h-gens.github.io/</id><updated>2015-11-21T14:21:00+01:00</updated><entry><title>Recovering a lost combination</title><link href="https://h-gens.github.io/recovering-a-lost-combination.html" rel="alternate"></link><updated>2015-11-21T14:21:00+01:00</updated><author><name>H.G.</name></author><id>tag:h-gens.github.io,2015-11-21:recovering-a-lost-combination.html</id><summary type="html">&lt;p&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="combination-recovery"&gt;Combination Recovery&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Only apply this method to locks for which you are the sole owner.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I lost the combination to an old Master Lock of mine. Fortunately, figuring out the combination for my type of lock is a &lt;a href="http://www.wikihow.com/Crack-a-%22Master-Lock%22-Combination-Lock"&gt;well-known process&lt;/a&gt;. Unfortunately, the previous link's method for finding the third value in the combination did not work for me, but I &lt;a href="http://masterunlocked.com/index1.html"&gt;found instructions&lt;/a&gt; that were very helpful. Once the third value is found there is an algorithm to generate 80 possible combinations, which is where Python comes in.&lt;/p&gt;
&lt;h4 id="procedure-outline"&gt;Procedure outline&lt;/h4&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Clear the lock by spinning the dial clockwise by three revolutions, ending with the dial set to zero.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rotate the dial through its twelve &amp;quot;sticking points&amp;quot; and find the non-fake sticking point. This non-fake point is the third value in the lock's combination.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the third value is found, run the script that follows.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="sticking-points"&gt;Sticking points&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sticking points occur when you pull up on the shackle and are only able to rotate the dial by approximately +/- 0.5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you've found a sticking point, move to the next one by removing tension from the shackle. Rotate the dial slightly counter-clockwise so that the next sticking point will catch upon tensioning the shackle again.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="a-sticking-point-is-likely-fake-if"&gt;A sticking point is likely fake if:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The dial pivots between two whole numbers (e.g., 20 and 21).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you pull up super hard on the shackle the dial's rotation becomes limited. (When I successfully found my third value, the dial rotated by +/-0.5 freely regardless of how much tension I applied to the shackle.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Python-implementation"&gt;Python implementation&lt;a class="anchor-link" href="#Python-implementation"&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[1]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;1. First find the non-fake sticking point (the third value).&lt;/span&gt;
&lt;span class="sd"&gt;2. Enter the third_value below, then run the script.&lt;/span&gt;
&lt;span class="sd"&gt;3. Try each combination until the correct one is found.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# ------------------------&lt;/span&gt;
&lt;span class="c"&gt;# user-defined input&lt;/span&gt;
&lt;span class="c"&gt;# ------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Find the third value manually, then assign it here.&lt;/span&gt;
&lt;span class="n"&gt;third_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="c"&gt;# ------------------------&lt;/span&gt;
&lt;span class="c"&gt;# algorithm&lt;/span&gt;
&lt;span class="c"&gt;# ------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Divide by 4 and store the remainder.  The remainder is called the&lt;/span&gt;
&lt;span class="c"&gt;# &amp;quot;magic number&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;magic_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;third_value&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="c"&gt;# Compute the possible values for the first value.&lt;/span&gt;
&lt;span class="n"&gt;first_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;magic_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c"&gt;# Compute the possible values for the second value.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;magic_number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;magic_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;magic_number&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;second_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;magic_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="c"&gt;# The two values closest to third_value can be eliminated.&lt;/span&gt;
&lt;span class="n"&gt;second_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;second_values&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;third_value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Compute the possible combinations.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;first_values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;second_values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c"&gt;# Uncomment the following line to pause the looping.&lt;/span&gt;
        &lt;span class="c"&gt;# r = raw_input(&amp;#39;continue ?&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre&gt;
0 - 2 - 20
0 - 6 - 20
0 - 10 - 20
0 - 14 - 20
0 - 26 - 20
0 - 30 - 20
0 - 34 - 20
0 - 38 - 20
4 - 2 - 20
4 - 6 - 20
4 - 10 - 20
4 - 14 - 20
4 - 26 - 20
4 - 30 - 20
4 - 34 - 20
4 - 38 - 20
8 - 2 - 20
8 - 6 - 20
8 - 10 - 20
8 - 14 - 20
8 - 26 - 20
8 - 30 - 20
8 - 34 - 20
8 - 38 - 20
12 - 2 - 20
12 - 6 - 20
12 - 10 - 20
12 - 14 - 20
12 - 26 - 20
12 - 30 - 20
12 - 34 - 20
12 - 38 - 20
16 - 2 - 20
16 - 6 - 20
16 - 10 - 20
16 - 14 - 20
16 - 26 - 20
16 - 30 - 20
16 - 34 - 20
16 - 38 - 20
20 - 2 - 20
20 - 6 - 20
20 - 10 - 20
20 - 14 - 20
20 - 26 - 20
20 - 30 - 20
20 - 34 - 20
20 - 38 - 20
24 - 2 - 20
24 - 6 - 20
24 - 10 - 20
24 - 14 - 20
24 - 26 - 20
24 - 30 - 20
24 - 34 - 20
24 - 38 - 20
28 - 2 - 20
28 - 6 - 20
28 - 10 - 20
28 - 14 - 20
28 - 26 - 20
28 - 30 - 20
28 - 34 - 20
28 - 38 - 20
32 - 2 - 20
32 - 6 - 20
32 - 10 - 20
32 - 14 - 20
32 - 26 - 20
32 - 30 - 20
32 - 34 - 20
32 - 38 - 20
36 - 2 - 20
36 - 6 - 20
36 - 10 - 20
36 - 14 - 20
36 - 26 - 20
36 - 30 - 20
36 - 34 - 20
36 - 38 - 20

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Controlling instruments over GPIB with SCPI</title><link href="https://h-gens.github.io/controlling-instruments-over-gpib-with-scpi.html" rel="alternate"></link><updated>2015-04-17T20:41:00+02:00</updated><author><name>H.G.</name></author><id>tag:h-gens.github.io,2015-04-17:controlling-instruments-over-gpib-with-scpi.html</id><summary type="html">&lt;p&gt;An electronics lab contains equipment that can usually be controlled through at least two means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the instrument's front panel  &lt;/li&gt;
&lt;li&gt;the instrument's GPIB address  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GPIB stands for &lt;a href="https://en.wikipedia.org/wiki/IEEE-488"&gt;General Purpose Interface Bus&lt;/a&gt; and provides a way of sending commands to the instrument.  These commands are referred to as SCPI commands (&lt;a href="https://en.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instrumentation"&gt;Standard Commands for Programmable Instruments&lt;/a&gt;), which are often found listed in an instrument's programming manual.  Every operation that can be performed via the instrument's front panel should have an equivalent SCPI command.  &lt;/p&gt;
&lt;p&gt;This post shows a brief Python script that talks to an Agilent E5270 DC parameteric measurement instrument and conducts a staircase sweep.  To run it one needs a GPIB card on the controlling computer, the &lt;a href="https://pyvisa.readthedocs.org/en/master/"&gt;PyVISA&lt;/a&gt; package, Keysight IO Libraries Suite, and the GPIB address of the E5270.  The script should work with an HP4142, which has almost identical settings and SCPI commands.  &lt;/p&gt;
&lt;h3&gt;Why Python?&lt;/h3&gt;
&lt;p&gt;Well, I personally do data analysis in Python (numpy/scipy/matplotlib modules and the Spyder IDE that is reminiscent of MATLAB; see &lt;a href="https://code.google.com/p/pythonxy/"&gt;Python(x,y)&lt;/a&gt; or &lt;a href="https://winpython.github.io/"&gt;WinPython&lt;/a&gt;), so it made sense for me to automate measurements in a language I'm already comfortable in.  I find the file IO and string/data manipulation features of Python to be much easier to use and read than those available in other languages.  Just by glancing at example code in a programming manual written in C++ or Visual Basic makes me readily appreciative of the straightforwardness and readibility of Python code.  &lt;/p&gt;
&lt;h3&gt;Useful links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cp.literature.agilent.com/litweb/pdf/E5260-90010.pdf"&gt;Agilent E5270 Series Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.keysight.com/en/pd-1985909/io-libraries-suite?&amp;amp;cc=US&amp;amp;lc=eng"&gt;Keysight IO Libraries Suite&lt;/a&gt;&lt;br /&gt;
(Note: Keysight was the electronics measurement division of Agilent before being spun-off.  Similarly, Agilent was the electronics measurement division of HP before being spun-off.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example Python script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;A sequence of commands to execute a staircase measurement of a 3-terminal&lt;/span&gt;
&lt;span class="sd"&gt;transistor (source/gate/drain terminals)&lt;/span&gt;

&lt;span class="sd"&gt;Assumed SMUs (source measure units) and their channels:&lt;/span&gt;
&lt;span class="sd"&gt;    two high-power SMUs on channels 2 and 4&lt;/span&gt;
&lt;span class="sd"&gt;    one medium-power SMU on channel 5&lt;/span&gt;

&lt;span class="sd"&gt;Biasing conditions:&lt;/span&gt;
&lt;span class="sd"&gt;    source on channel 2 is biased at a constant 0V.  &lt;/span&gt;
&lt;span class="sd"&gt;    drain on channel 4 is staircased from 0 to 10V by 0.1V.  &lt;/span&gt;
&lt;span class="sd"&gt;    gate on channel 5 is biased at a constant 3V.&lt;/span&gt;

&lt;span class="sd"&gt;See manual for a description of arguments passed to each SCPI command.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;visa&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="c"&gt;# the GPIB card number on the local computer&lt;/span&gt;
&lt;span class="n"&gt;card_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;# the instrument&amp;#39;s GPIB address&lt;/span&gt;
&lt;span class="c"&gt;# (use visa.get_instruments_list() to discover instruments)&lt;/span&gt;
&lt;span class="n"&gt;instrument_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="c"&gt;# time to sleep after issuing a write command&lt;/span&gt;
&lt;span class="c"&gt;# (this slows Python down and allows the instrument to keep up)&lt;/span&gt;
&lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;

&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;visa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instrument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;GPIB&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;::&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;::INSTR&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instrument_address&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# instrument setup&lt;/span&gt;
&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# reset the instrument&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# set the measurement mode to staircase sweep&lt;/span&gt;
&lt;span class="c"&gt;# specify the channels that should be measured&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mm 2,2,4,5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# configure the staircase on channel 4 (drain)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wv 4,1,0,0,10,101,1e-2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# enable the output switches on channels 2,4,5&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cn 2,4,5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# set the bias of the constant channels 2/5 (source/gate)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dv 2,0,0,1e-2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dv 5,0,3,1e-4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# execute and close&lt;/span&gt;
&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# execute the measurement&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;xe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# close all channels so they no longer are outputting voltage&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# read the result from the output buffer&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While the measurement data is now held in the 'result' variable, it needs to be processed.  As-is, 'result' is a string composed of comma-separated values.  If this string were to be split by commas (i.e., &lt;code&gt;result.split(',')&lt;/code&gt;) then the length of the resulting list would be 3 x &lt;code&gt;len(staircase)&lt;/code&gt;.  One multiplies by 3 because for each point in the staircase sweep there are three channels measured whose values appear consecutively in the 'result' string.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example 'result' string:&lt;/strong&gt; NEI+0.00005E-09,NBI+0.00000E-09,NDI+0.00010E-09,NEI+0.00010E-09,NBI+0.00007E-09,NDI+0.00080E-09, ...  (Notice how the second character's cycle starts over after the third group of values.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In each comma-separated value there are three preceding characters.  The first character is the status code.  The second character is the letter code.  There is a unique letter code for each channel in the E5270, so a mapping dictionary is referred to in order to figure out which channel corresponds to which letter code.  The third character indicates the data type.  See page 36 of the programming manual linked above.  &lt;/p&gt;
&lt;h2&gt;Processing the result&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# parsing data&lt;/span&gt;
&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# this is the letter code mapping dictionary&lt;/span&gt;
&lt;span class="c"&gt;# (see page 37 of the programming manual)&lt;/span&gt;
&lt;span class="n"&gt;CHANNELS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# channel 2&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# channel 4&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Ig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# channel 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# split the CSV string so it can be iterated over&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;currents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;Ig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# iterate over the result list and store the values as floats&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# get the terminal name by consulting the mapping dictionary&lt;/span&gt;
    &lt;span class="n"&gt;terminal_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CHANNELS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="c"&gt;# convert the numerical portion of the string to a float&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="c"&gt;# store value within the &amp;#39;currents&amp;#39; dict&lt;/span&gt;
    &lt;span class="n"&gt;currents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;terminal_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# plotting&lt;/span&gt;
&lt;span class="c"&gt;# -----------------&lt;/span&gt;
&lt;span class="c"&gt;# create the independent variable (Vd) so the result can be plotted&lt;/span&gt;
&lt;span class="n"&gt;Vd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# plot the data&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;semilogy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Ig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Closing&lt;/h3&gt;
&lt;p&gt;That concludes the quick introduction to instrument control via GPIB+SCPI.  In a more complete instrument controller, I would send additional commands to change instrument settings such as integration time and store results in &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt; DataFrames (or numpy arrays).  Instead of a one-off script, it is often useful to create a class for a particular instrument that contains methods to perform many different types of measurements.  This makes the instrument an importable library with a human-readable command set and avoids having to write/remember SCPI commands.  &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Converting IPython notebooks to PDFs</title><link href="https://h-gens.github.io/converting-ipython-notebooks-to-pdfs.html" rel="alternate"></link><updated>2015-01-04T09:35:00+01:00</updated><author><name>H.G.</name></author><id>tag:h-gens.github.io,2015-01-04:converting-ipython-notebooks-to-pdfs.html</id><summary type="html">&lt;p&gt;A few weeks ago I wanted to share an &lt;a href="http://ipython.org/"&gt;IPython notebook&lt;/a&gt; with a friend who did not have IPython installed.  The natural choice was to convert it to a PDF, which turned out to be more painful than expected.  The following instructions are written for Windows users and IPython v2.3.  The only dependency is &lt;a href="http://wkhtmltopdf.org/"&gt;wkhtmltopdf&lt;/a&gt; (webkit HTML to PDF).  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the notebook editor, export to HTML.&lt;br /&gt;
  a. File -&amp;gt; Download as -&amp;gt; HTML (.html)&lt;br /&gt;
  b. You will need to manually collect required images and place them in the correct relative path to the exported file or change src="..." paths in the HTML.  &lt;/li&gt;
&lt;li&gt;If you use a custom.css file then either edit the exported HTML file to point to it or copy the file to the expected path.&lt;br /&gt;
  a. custom.css lives in &lt;em&gt;~/.ipython/profile_default/static/custom/&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;Open the exported HTML file in your browser and save it (&lt;em&gt;File -&amp;gt; Save As&lt;/em&gt;).&lt;br /&gt;
  a. While this step seems unnecessary, without it my MathJax markup was the wrong font size in the resulting PDF.  &lt;/li&gt;
&lt;li&gt;Run wkhtmltopdf on the saved copy from the previous step.&lt;br /&gt;
  a. &lt;strong&gt;wkhtmltopdf.exe -s Letter -L 40mm -R 40mm -T 20mm -B 20mm --javascript-delay 5000 infile.html outfile.pdf&lt;/strong&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;-s&lt;/strong&gt; argument sets the page size.  The &lt;strong&gt;-L, -R, -T, -B&lt;/strong&gt; arguments set the left/right/top/bottom margins.  The &lt;strong&gt;--javascript-delay&lt;/strong&gt; argument gives the MathJax javascript time to run (the time required probably depends on document size).  There are many options available in wkhtmltopdf, which can be viewed by calling the executable from the command line without any arguments.  &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Getting started with Pelican and IPython notebooks</title><link href="https://h-gens.github.io/getting-started-with-pelican-and-ipython-notebooks.html" rel="alternate"></link><updated>2015-01-03T09:19:00+01:00</updated><author><name>H.G.</name></author><id>tag:h-gens.github.io,2015-01-03:getting-started-with-pelican-and-ipython-notebooks.html</id><summary type="html">&lt;p&gt;This site was created with the static site generator, &lt;a href="http://docs.getpelican.com/en/3.5.0/"&gt;Pelican&lt;/a&gt;.  I chose Pelican in order to use &lt;a href="https://jakevdp.github.io"&gt;jakevdp's&lt;/a&gt; liquid_tags notebook &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/liquid_tags/notebook.py"&gt;plugin&lt;/a&gt; that allows for posting a subset of &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt; notebook cells.  The comments below are for Pelican v3.5.0, IPython v1.2, and a December 30, 2014 clone of pelican-plugins.  &lt;/p&gt;
&lt;p&gt;Below are steps used to install Pelican.  &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; and &lt;a href="http://nodejs.org/download/"&gt;node.js&lt;/a&gt; must be installed (I was unable to generate posts containing IPython notebook files without node.js).  Console/terminal commands are contained in brackets.  &lt;/p&gt;
&lt;p&gt;An older version of IPython is needed because the CSS class names used for python syntax highlighting changed in IPython v2.3.  The liquid_tags notebook plugin appears to only know about the v1.2 CSS class names.  For example, in an IPython notebook, a function named &lt;code&gt;foo&lt;/code&gt; gets wrapped in a class by way of a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element.  In IPython v1.2 this becomes &lt;code&gt;&amp;lt;span class="nf"&amp;gt;foo&amp;lt;/span&amp;gt;&lt;/code&gt;, but in v2.3 this is &lt;code&gt;&amp;lt;span class="cm-def"&amp;gt;foo&amp;lt;/span&amp;gt;&lt;/code&gt; (I used Chrome to inspect the elements).  I'm not smart enough to fix it, but I assume the problem begins in the plugin's notebook.custom_highlighter() function.  Inside this function a call is made to &lt;code&gt;HtmlFormatter(cssclass='highlight-ipynb')&lt;/code&gt; where &lt;code&gt;HtmlFormatter&lt;/code&gt; comes from the &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; library.  &lt;/p&gt;
&lt;h2&gt;Quick pelican setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make a dedicated directory to house the site's contents and change into it.  &lt;/li&gt;
&lt;li&gt;Set up a virtual environment&lt;br /&gt;
  a. &lt;strong&gt;[virtualenv env]&lt;/strong&gt;&lt;br /&gt;
  b. &lt;strong&gt;[env\scripts\activate]&lt;/strong&gt; &lt;br /&gt;
  c. &lt;strong&gt;[pip install pelican markdown ipython==1.2]&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Install plugins/themes&lt;br /&gt;
  a. &lt;strong&gt;[git clone https://github.com/getpelican/pelican-plugins.git]&lt;/strong&gt;&lt;br /&gt;
  b. &lt;strong&gt;[git clone https://github.com/getpelican/pelican-themes.git]&lt;/strong&gt;&lt;br /&gt;
  c. Find other themes by looking at other users' github repositories (e.g. &lt;a href="https://github.com/jakevdp/pelican-octopress-theme"&gt;octopress&lt;/a&gt;, &lt;a href="https://github.com/danielfrg/middle-theme"&gt;middle-theme&lt;/a&gt;)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[pelican-quickstart]&lt;/strong&gt;  // see &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;here&lt;/a&gt; for a list of questions that are asked  &lt;/li&gt;
&lt;li&gt;Configure Pelican via pelicanconf.py&lt;br /&gt;
  a. &lt;em&gt;DELETE_OUTPUT_DIRECTORY = False&lt;/em&gt;&lt;br /&gt;
  b. &lt;em&gt;PLUGIN_PATHS = ['path/to/pelican-plugins']&lt;/em&gt;&lt;br /&gt;
  c. &lt;em&gt;PLUGINS = ['liquid_tags.notebook', 'liquid_tags.literal']&lt;/em&gt;&lt;br /&gt;
  d. &lt;em&gt;EXTRA_HEADER = open('_nb_header.html').read().decode('utf-8') if os.path.exists('_nb_header.html') else None&lt;/em&gt;&lt;br /&gt;
  e. &lt;em&gt;NOTEBOOK_DIR = 'notebooks'&lt;/em&gt;&lt;br /&gt;
  f. &lt;em&gt;THEME = 'path/to/theme'&lt;/em&gt;&lt;br /&gt;
  g. &lt;em&gt;LOAD_CONTENT_CACHE = False&lt;/em&gt;  &lt;/li&gt;
&lt;li&gt;Edit the chosen theme's 'base.html' and add &lt;code&gt;{% if EXTRA_HEADER %}{{ EXTRA_HEADER }}{% endif %}&lt;/code&gt; to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; block  &lt;/li&gt;
&lt;li&gt;Configure 'content' directory&lt;br /&gt;
  a. &lt;strong&gt;[mkdir content/images]&lt;/strong&gt;&lt;br /&gt;
  b. &lt;strong&gt;[mkdir content/notebooks]&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Run the site generator with &lt;strong&gt;[make html]&lt;/strong&gt; or &lt;strong&gt;[make regenerate]&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Serve the site locally with &lt;strong&gt;[make serve]&lt;/strong&gt; or regenerate files + serve with &lt;strong&gt;[make devserver]&lt;/strong&gt; if not on Windows.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Posts are written in markdown by the user and stored in content/, where each post's filename should have extension 'md'.  Notebooks are incorporated in a markdown post with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% notebook file.ipynb cells[i:j] %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The 'cells' argument is optional and can be omitted; the slices are standard python syntax.  The &lt;em&gt;LOAD_CONTENT_CACHE&lt;/em&gt; setting should be False if notebooks are edited after they're added to content/notebooks/.  Otherwise, the cached version is used by Pelican.  &lt;/p&gt;
&lt;p&gt;Initially, &lt;strong&gt;[make html]&lt;/strong&gt; must be run twice because '_nb_header.html' is only generated after the first run.  This file contains all the CSS/JS present in an IPython notebook.  &lt;/p&gt;
&lt;p&gt;Math blocks were left-aligned in IPython v1.2 but are centered in IPython v2.3, which is the preferred behavior.  To force centering of math blocks while using v1.2, I made copy of _nb_header.html, edited it to include the addition below, and pointed to it in pelicanconf.py's &lt;em&gt;EXTRA_HEADER&lt;/em&gt; setting.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
.MathJax_Display{text-align: center !important;}
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Repositories&lt;/h2&gt;
&lt;p&gt;My choice was to have two repositories.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inside the master directory where &lt;strong&gt;[pelican-quickstart]&lt;/strong&gt; is run.  &lt;/li&gt;
&lt;li&gt;A subdirectory of the above that holds the content pushed to the web server.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The former has a .gitignore file that contains:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;*.pyc
cache/
env/
output/
username.github.io/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The latter repository is a &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; repository.  The 'output/' directory generated by Pelican is copied to this repository.    &lt;/p&gt;
&lt;p&gt;This site's repository containing the raw Pelican content can be found &lt;a href="https://github.com/h-gens/h-gens.github.io-pelican"&gt;here&lt;/a&gt;.  The generated site can be found &lt;a href="https://github.com/h-gens/h-gens.github.io"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;h2&gt;Helpful references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;Migrating from Octopress to Pelican&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican/"&gt;How to setup Github User Page with Pelican&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Migrating to GitHub Pages using Pelican&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/3.1.1/getting_started.html"&gt;Getting started&lt;/a&gt; (Pelican docs)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pirsquared.org/blog/pelican-tags-vs-categories.html"&gt;tags-vs-categories in Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Script to summarize available Pelican themes&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Ugly script used to summarize all pelican-themes.&lt;/span&gt;
&lt;span class="sd"&gt;https://github.com/getpelican/pelican-themes.&lt;/span&gt;

&lt;span class="sd"&gt;Place this script one level below THEMES_DIR.&lt;/span&gt;
&lt;span class="sd"&gt;It will generate summary.html containing the themes.  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;od&lt;/span&gt;

&lt;span class="n"&gt;THEMES_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pelican-themes&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# first, discover all themes that have screenshots&lt;/span&gt;
&lt;span class="c"&gt;# each screenshot&amp;#39;s filename is stored&lt;/span&gt;
&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;THEMES_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;accumulated_screenshots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;od&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;theme_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;THEMES_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theme_directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;theme_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theme_directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;accumulated_screenshots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;theme_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;theme_contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;theme_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;accumulated_screenshots&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theme_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# second, create an HTML file&lt;/span&gt;
&lt;span class="c"&gt;# the IMG elements point to the accumulated screenshots&lt;/span&gt;
&lt;span class="n"&gt;to_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenshots&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;accumulated_screenshots&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;THEMES_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenshot&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenshots&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# print the theme&amp;#39;s name only once&lt;/span&gt;
            &lt;span class="n"&gt;to_write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/h1&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;screenshot_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;to_write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;center&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;to_write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;&amp;lt;img src=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; height=500&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;screenshot_path&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;to_write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;/center&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;to_write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;to_write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;summary.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry></feed>